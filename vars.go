package win32

import "syscall"

// Predefined window handles
const (
	HWND_BROADCAST = HWND(0xFFFF)
	HWND_BOTTOM    = HWND(1)
	HWND_NOTOPMOST = ^HWND(1) // -2
	HWND_TOP       = HWND(0)
	HWND_TOPMOST   = ^HWND(0) // -1
	HWND_DESKTOP   = HWND(0)
	HWND_MESSAGE   = ^HWND(2) // -3
)

//Window Priorities
const (
	ABOVE_NORMAL_PRIORITY_CLASS   = 0x00008000
	BELOW_NORMAL_PRIORITY_CLASS   = 0x00004000
	HIGH_PRIORITY_CLASS           = 0x00000080
	IDLE_PRIORITY_CLASS           = 0x00000040
	NORMAL_PRIORITY_CLASS         = 0x00000020
	PROCESS_MODE_BACKGROUND_BEGIN = 0x00100000
	PROCESS_MODE_BACKGROUND_END   = 0x00200000
	REALTIME_PRIORITY_CLASS       = 0x00000100
)

// INPUT Type
const (
	INPUT_MOUSE    = 0
	INPUT_KEYBOARD = 1
	INPUT_HARDWARE = 2
)

//MSG ...
type MSG struct {
	HWnd    HWND
	Message uint32
	WParam  uintptr
	LParam  uintptr
	Time    uint32
	Pt      POINT
}

const (
	GUI_CARETBLINKING  = 0x00000001
	GUI_INMENUMODE     = 0x00000004
	GUI_INMOVESIZE     = 0x00000002
	GUI_POPUPMENUMODE  = 0x00000010
	GUI_SYSTEMMENUMODE = 0x00000008
)

const (
	KBD_JAPANESE = "00000411"
)

//GUITHREADINFO
//cbSize: The size of this structure, in bytes. The caller must set this member to sizeof(GUITHREADINFO).
//flags: The thread state. This member can be one or more of the following values. e.g GUI_CARETBLINKING
//hwndActive: A handle to the active window within the thread.
//hwndFocus: A handle to the window that has the keyboard focus.
//hwndCapture: A handle to the window that has captured the mouse.
//hwndMenuOwner: A handle to the window that owns any active menus.
//hwndMoveSize: A handle to the window in a move or size loop.
//hwndCaret: A handle to the window that is displaying the caret.
//rect: The caret's bounding rectangle, in client coordinates, relative to the window specified by the hwndCaret member.
type GUITHREADINFO struct {
	cbSize        uint32 //DWORD
	flags         uint32 //DWORD
	HWNDActive    HWND
	HWNDFocus     HWND
	HWNDCapture   HWND
	HWNDMenuOwner HWND
	HWNDMoveSize  HWND
	HWNDCaret     HWND
	CRect         RECT
}

//MOUSE_INPUT ...
type MOUSE_INPUT struct {
	Type uint32
	Mi   MOUSEINPUT
}

//MOUSEINPUT ...
type MOUSEINPUT struct {
	Dx          int32
	Dy          int32
	MouseData   uint32
	DwFlags     uint32
	Time        uint32
	DwExtraInfo uintptr
}

//KEYBD_INPUT ...
type KEYBD_INPUT struct {
	Type uint32
	Ki   KEYBDINPUT
}

//KEYBDINPUT ...
type KEYBDINPUT struct {
	WVk         uint16
	WScan       uint16
	DwFlags     uint32
	Time        uint32
	DwExtraInfo uintptr
	Unused      [8]byte
}

// KEYBDINPUT DwFlags
const (
	KEYEVENTF_KEYDOWN     = 0
	KEYEVENTF_EXTENDEDKEY = 0x0001
	KEYEVENTF_KEYUP       = 0x0002
	KEYEVENTF_SCANCODE    = 0x0008
	KEYEVENTF_UNICODE     = 0x0004
)

//Virtual Keys
const (
	VK_SHIFT   = 0x10
	VK_CONTROL = 0x11
	VK_ALT     = 0x12
)

const (
	MSGFLT_RESET    = 0
	MSGFLT_ALLOW    = 1
	MSGFLT_DISALLOW = 2
)

//HARDWARE_INPUT ...
type HARDWARE_INPUT struct {
	Type uint32
	Hi   HARDWAREINPUT
}

//HARDWAREINPUT ...
type HARDWAREINPUT struct {
	UMsg    uint32
	WParamL uint16
	WParamH uint16
	Unused  [16]byte
}

//POINT xy points in coordinate space
type POINT struct {
	X, Y int32
}

//RECT defines a rectangle
type RECT struct {
	Left, Top, Right, Bottom int32
}

type (
	//HANDLE ...
	HANDLE uintptr
)

type (
	//HWND ...
	HWND      HANDLE
	HMODULE   HANDLE
	HHOOK     HANDLE
	HINSTANCE HANDLE
	HKL       HANDLE

	DWORD uint32
	UINT  uint32
	BOOL  int32
	CHAR  rune
)

//HOOKPROC
// type HOOKPROC func(int, uintptr, uintptr) uintptr

//HOOKPROC An application-defined callback (or hook) function that
//the system calls in response to events generated by an accessible object.
//hook: Handle to an event hook function. This value is returned
//			 by SetWinEventHook when the hook function is installed and
//			 is specific to each instance of the hook function.
//event: Specifies the event that occurred. This value is one of the event constants.
//hwnd: Handle to the window that generates the event, or NULL if no window is
//		associated with the event. For example, the mouse pointer is not associated with a window.
//idObject: Identifies the object associated with the event. This is one of the object
//			identifiers or a custom object ID.
//idChild: Identifies whether the event was triggered by an object or a child element of the object.
//idEventThread: ?????
//dwmsEventTime: Specifies the time, in milliseconds, that the event was generated.
type HOOKPROC func(hook HHOOK, event uint32, hwnd HWND, idObject, idChild, idEventThread, dwmsEventTime uint32) uintptr

//WNDENUMPROC ...
type WNDENUMPROC func(hwnd HWND, p uintptr) uintptr

//Events
const (
	EVENT_SYSTEM_FOREGROUND     = 0x0003
	EVENT_SYSTEM_MOVESIZESTART  = 0x000A
	EVENT_SYSTEM_MOVESIZEEND    = 0x000B
	EVENT_SYSTEM_SWITCHSTART    = 0x0014
	EVENT_SYSTEM_SWITCHEND      = 0x0015
	EVENT_OBJECT_FOCUS          = 0x8005
	EVENT_OBJECT_HIDE           = 0x8003
	EVENT_OBJECT_SELECTION      = 0x8006
	EVENT_OBJECT_LOCATIONCHANGE = 0x800B
	EVENT_MIN                   = 0x00000001
	EVENT_MAX                   = 0x7FFFFFFF

	OBJID_WINDOW   = 0x00000000
	OBJID_SYSMENU  = 0xFFFFFFFF
	OBJID_TITLEBAR = 0xFFFFFFFE
	OBJID_MENU     = 0xFFFFFFFD
	OBJID_CLIENT   = 0xFFFFFFFC
	OBJID_VSCROLL  = 0xFFFFFFFB
	OBJID_HSCROLL  = 0xFFFFFFFA
	OBJID_SIZEGRIP = 0xFFFFFFF9
	OBJID_CARET    = 0xFFFFFFF8
	OBJID_CURSOR   = 0xFFFFFFF7
	OBJID_ALERT    = 0xFFFFFFF6
	OBJID_SOUND    = 0xFFFFFFF5
)

const (
	WINEVENT_OUTOFCONTEXT   = 0x0
	WINEVENT_SKIPOWNTHREAD  = 0x1
	WINEVENT_SKIPOWNPROCESS = 0x2
	WINEVENT_INCONTEXT      = 0x4
)

const (
	WM_QUIT = 0x0012
	WM_USER = 0x0400
	WM_APP  = 0x8000
)

//MustLoadLibrary loads a dll and then returns error if
//not able to
func MustLoadLibrary(name string) (uintptr, error) {
	lib, err := syscall.LoadLibrary(name)
	if err != nil {
		return 0, err
	}

	return uintptr(lib), nil
}

//MustGetProcAddress ...
func MustGetProcAddress(lib uintptr, name string) uintptr {
	addr, err := syscall.GetProcAddress(syscall.Handle(lib), name)
	if err != nil {
		panic(err)
	}

	return uintptr(addr)
}

//UintToString converts []uint16 to a string
func UintToString(in []uint16) string {
	return syscall.UTF16ToString(in)
}

//StringToUint converts []uint16 to a string
func StringToUint(in string) *uint16 {
	return syscall.StringToUTF16Ptr(in)
}
